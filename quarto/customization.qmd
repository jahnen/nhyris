---
title: "Customize nhyris"
---

### R Packages

`nhyris` automatically detects R packages and their dependencies in every R file within the `shiny` directory.

```r
library(PKGNAME)
require(PKGNAME)
```

If these R packages are available on CRAN and can be installed with `install.packages`, `nhyris` will handle their installation.

#### Default R Packages

`nhyris` uses `shiny` and its dependency R packages.

The following R packages (with their versions) are installed by default:  

```bash
R6 2.6.1 
base64enc 0.1-3
cachem 1.1.0
cli 3.6.5 
commonmark 1.9.5
Rcpp 1.0.14 
bslib 0.9.0 
crayon 1.5.3 
digest 0.6.37 
fastmap 1.2.0 
fontawesome 0.5.3 
fs 1.6.6 
glue 1.8.0 
htmltools 0.5.8.1 
httpuv 1.6.16 
jquerylib 0.1.4 
jsonlite 2.0.0 
later 1.4.2 
lifecycle 1.0.4 
magrittr 2.0.3 
memoise 2.0.1 
mime 0.13 
promises 1.3.2 
rappdirs 0.3.3 
rlang 1.1.6 
sass 0.4.10 
sourcetools 0.1.7-1 
shiny 1.10.0 
withr 3.0.2 
xtable 1.8-4 
```

#### Using R Packages from GitHub

`nhyris` uses [`pak`](https://github.com/r-lib/pak) to install R packages.

- To install CRAN packages:  

```r
pak::pak("ggplot2")
```
- To install GitHub packages, use the `OWNER/REPO` format (e.g., `jcheng5/googleCharts`):  

```r
pak::pak("jcheng5/googleCharts")
```

To specify GitHub packages for `nhyris`, follow these steps:

1. Add the required package information to the `pak-pkgs.R` file in your project:
    
```r
github_pkgs <- c(
    "jcheng5/googleCharts",
    ...
)
```

2. Run the following command:

```
nhyris update PROJECT
```

This will install the specified GitHub R packages.

#### Using R Packages from Bioconductor

To specify Bioconductor packages for `nhyris`, follow these steps:

1. Add the required package information to the `pak-pkgs.R` file in your project:
    
```r
bioconductor_pkgs <- c(
    "AnnotationDbi", 
    ...
)
```

2. Run the following command:

```
nhyris update PROJECT
```

---

### Icon

`nhyris` uses its logo as the icon for the Electron application.

<img src='images/app.png' width='70%'>

#### Icon File Location

The icon image file must exist in each project.  
For example, in a project named `myapp`, the file **myapp/icon.png** will be used as the Electron application's icon in the `out` directory.

::: {.callout-note}
The template includes three example image files: `icon.png`, `icon.icns`, and `icon.ico`.  
These files are essentially the same image, just copied and renamed.
:::

On macOS, all of `png`, `icns`, and `ico` formats are supported.  
However, according to the official [Electron Forge guide](https://www.electronforge.io/guides/create-and-add-icons), it is recommended to use:
- `icns` for macOS
- `ico` for Windows
- `png` for Linux

#### Creating a Custom Icon

To create a custom icon on **macOS**, you can use the `nhyris.key` template file provided in the repository.

1. Edit the image as desired.
2. Export the relevant page as a `png` image.

<img src='images/keynote.png' width='70%'>

### squirrel.windows

`nhyris` provides a feature for building a Windows executable installer using `squirrel.windows`.

To build the installer, use the following command:

```
nhyris build -m squirrel
```

You can see an example result [here](https://github.com/jahnen/nhyris/issues/43).

For more details for squirrel.windows, see the [NuGet Package Metadata documentation](https://github.com/Squirrel/Squirrel.Windows/blob/de5baa93a134ac24fd5bf9172d3e457ac27e0b7a/docs/using/nuget-package-metadata.md).

#### Metadata Configuration

In `nhyris`, you can modify the `squirrelMakerConfig` object inside the `handleSquirrelMaker` function in `maker.js`.

Before using this code, you must build the project first.

Example for setting the installer icon and URL:

```js
config: {
    setupIcon: "assets/setupIcon.ico",
    iconUrl: "https://github.com/jahnen/nhyris/raw/main/template/assets/icon.ico",
},
```

#### Installer Icon Not Displaying

The `setupIcon` is used as the installer icon, but due to caching issues, it may not appear immediately.  
You can check the icon in the file properties or after rebooting your PC.  
See the related [issue](https://github.com/electron/forge/issues/2148#issuecomment-913028556) for more details.

#### iconUrl

When using `iconUrl`, you **must** provide a URL from the web (not a local file path).  
This is an Electron policy and cannot be changed by `nhyris`.

#### Creating ICO Files

Simply renaming a file to `.ico` may not work properly.  
To convert a PNG to ICO, it is recommended to use an online converter such as [icoconverter.com](https://www.icoconverter.com/).


### deb

`nhyris` supports building `.deb` installers for Debian-based Linux distributions using Electron Forge's deb maker.

#### Prerequisites

To build a `.deb` package, you need to have `dpkg` and `fakeroot` installed on your system.  
You can install them with:

```bash
sudo apt-get update
sudo apt-get install dpkg fakeroot
```

#### Configuration Options

By default, no extra options are specified for the deb maker in `nhyris`.  
If you need to customize the build (e.g., set maintainer, description, categories, etc.), refer to the available options in the [Electron Forge deb maker config documentation](https://github.com/electron/forge/blob/main/packages/maker/deb/src/Config.ts).

#### Uninstalling the Application

To uninstall your `.deb` application, use one of the following commands:

```bash
sudo apt remove myapp
# or, to remove configuration files as well:
sudo apt purge myapp
```




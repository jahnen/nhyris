---
title: "Architecture"
---

::: {.callout-note}
This documentation is for developers who want to contribute or make modifications.
:::

## Architecture of nhyris

nhyris consists of five parts: **template**, **commands**, **Electrons**, **Installings**, and **Documents**.

### 1. template

#### shiny

If the name is not predefined (e.g., **ex01**):

- **app.R**: R script for a simple Shiny application.
- **nn-x.R (pattern)**: R scripts used in the Shiny gallery. If a predefined template name is used, it will replace the previous **app.R**.

#### src

These files are responsible for running the Electron application and managing its lifecycle:

- **index.js**:  
  The main entry point for the Electron app. Handles application state, creates and manages windows (loading, main, error), launches and monitors the R process via **start-shiny.R**, and switches to the Shiny app view when ready.
- **app-state.js**:  
  Manages global application state, such as window references, configuration, and paths.
- **window-manager.js**:  
  Contains functions for creating and controlling different Electron windows (splash, main, error).
- **process-manager.js**:  
  Handles launching, monitoring, and terminating external processes (e.g., R).
- **server-utils.js**:  
  Provides utilities for checking Shiny server status, port availability, and related server tasks.
- **error-handler.js**:  
  Handles errors during app execution and displays error windows.
- **loading.html**:  
  The HTML file shown as a splash/loading screen while the Shiny server is starting.
- **preload.js**:  
  Preload script for secure IPC communication between Electronâ€™s main and renderer processes.
- **start-shiny.R**:  
  R script that launches the Shiny app on a specified port (default: 1124).

### 2. commands

These files provide CLI commands for managing `nhyris` projects.

- **bin/nhyris.js**: Entry point for all CLI commands.
- **init.js**: Implements the `nhyris init` command. Initializes a new project, copies templates, installs dependencies, and updates `.gitignore`.
- **build.js**: Implements the `nhyris build` command. Builds a nhyris app using Electron Forge, supporting makers like `zip`, `dmg`, and `squirrel`.
- **run.js**: Implements the `nhyris run` command. Runs a specified nhyris app using Electron Forge, and ensures proper process cleanup.
- **update.js**: Implements the `nhyris update` command. Updates R and Node packages for a specified nhyris project.

If you have issues with these, please set the label as `commands`.

### 3. Electrons

These files contain configuration for managing the Electron application.
Some configuration is also present in **src/index.js**.

- **template/forge.config.js**: Electron Forge configuration file.
- **template/package.json**: Node package information for Electron.

::: {.callout-note}
**/package.json** is the Node package information for `nhyris`.
:::

### 4. Installings

These files are for installing a local R environment.

- **pak-pkgs.R**: Installs CRAN packages into the local R environment.
- **r.sh**: Shell script to install a local R distribution.

### 5. Documents

- **\_quarto.yml**: Quarto configuration.
- **\*.qmd**: Quarto document files.
- **brand/**: Quarto configuration.
- **docs/**: Quarto output destination.
- **images/**: nhyris logos and images.


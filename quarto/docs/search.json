[
  {
    "objectID": "troubleshooting.html",
    "href": "troubleshooting.html",
    "title": "Troubleshooting",
    "section": "",
    "text": "nhyris project successfully built, but not started\nIn most case, running shiny code with nhyris has problem.\nBecause nhyris uses independent R environment even if your shiny worked well in your environment like Positron, Rstudio or vscode shiny may not work in nhyris.\nFor example: using different version of R or dependency problem from not installed R package and so on.\nTo check R problem, follow these steps.\n\nmove to inside your project \nfind src/process-manager.js\nin L42, modify code.\n\n// BEFORE\n// stdio: \"ignore\",\n// AFTER\nstdio: \"inherit\",\n\n\n\n\n\n\nNote\n\n\n\nThis will show log from shiny application to your IDE’s terminal\n\n\n\n\nExample logs\nHere’s example log\n&gt; \n&gt; .libPaths(r_lib_paths) # Temporarily set library paths to R_LIB_PATHS\n&gt; \n&gt; if (!requireNamespace(\"shiny\", quietly = TRUE)) {\n+   stop(\"The 'shiny' package is not installed in R_LIB_PATHS: \", r_lib_paths)\n+ }\n&gt; shiny_dir &lt;- Sys.getenv(\"RE_SHINY_PATH\")\n&gt; \n&gt; shiny::runApp(\n+   appDir = shiny_dir,\n+   host = \"127.0.0.1\",\n+   launch.browser = FALSE,\n+   port = 1124\n+ )\nLoading required package: shiny\n\n...\n\nError: `server` must be a function\n\n...\n\nError checking server status: TypeError: fetch failed\n    at node:internal/deps/undici/undici:13510:13\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async checkServerStatus (/Users/jinhwan/Documents/GitHub/nhyris/ex39/src/index.js:34:17)\n    at async tryStartWebserver (/Users/jinhwan/Documents/GitHub/nhyris/ex39/src/index.js:139:24)\n    at async App.&lt;anonymous&gt; (/Users/jinhwan/Documents/GitHub/nhyris/ex39/src/index.js:253:5) {\n  [cause]: Error: connect ECONNREFUSED 127.0.0.1:1124\n      at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1611:16) {\n    errno: -61,\n    code: 'ECONNREFUSED',\n    syscall: 'connect',\n    address: '127.0.0.1',\n    port: 1124\n  }\n}\nThis log can be considered as 3 part.\n\nR execution part: log from running R and shiny. This is not error.\n\n&gt; \n&gt; .libPaths(r_lib_paths) # Temporarily set library paths to R_LIB_PATHS\n&gt; \n&gt; if (!requireNamespace(\"shiny\", quietly = TRUE)) {\n+   stop(\"The 'shiny' package is not installed in R_LIB_PATHS: \", r_lib_paths)\n+ }\n&gt; shiny_dir &lt;- Sys.getenv(\"RE_SHINY_PATH\")\n&gt; \n&gt; shiny::runApp(\n+   appDir = shiny_dir,\n+   host = \"127.0.0.1\",\n+   launch.browser = FALSE,\n+   port = 1124\n+ )\nLoading required package: shiny\n\n...\n\nError part: you need to investigate where it’s from.\n\nError: `server` must be a function\nTn this shiny application, I used server as ui.\nui &lt;- fluidPage(...)\nserver &lt;- ui\nshinyApp(ui = ui, server = server)\n\nConnection part: the most important you should notice.\n\nnhyris has mechanism with 2 part: - Run shiny application with R script to port localhost:1124 - Connect shiny application in electron.\nthe run part, will takes some time (shiny requires time to load).\nHowever both part are initiated almost same time, so Connect part may generate error like below.\nBut after some trial, (around ~ 10) it will connected with shiny application and open electron application.\nSo if you see this log with few, it’s fine. but if you see this more than 10 time: you should fix the shiny application.\nError checking server status: TypeError: fetch failed\n    at node:internal/deps/undici/undici:13510:13\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async checkServerStatus (/Users/jinhwan/Documents/GitHub/nhyris/ex39/src/index.js:34:17)\n    at async tryStartWebserver (/Users/jinhwan/Documents/GitHub/nhyris/ex39/src/index.js:139:24)\n    at async App.&lt;anonymous&gt; (/Users/jinhwan/Documents/GitHub/nhyris/ex39/src/index.js:253:5) {\n  [cause]: Error: connect ECONNREFUSED 127.0.0.1:1124\n      at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1611:16) {\n    errno: -61,\n    code: 'ECONNREFUSED',\n    syscall: 'connect',\n    address: '127.0.0.1',\n    port: 1124\n  }\n}\n\n\n\n\nMade by jahnen"
  },
  {
    "objectID": "architecture.html",
    "href": "architecture.html",
    "title": "Architecture",
    "section": "",
    "text": "Note\n\n\n\nThese are for developers who want to contribute or make modification.\nMade by jahnen"
  },
  {
    "objectID": "architecture.html#architecture-of-nhyris",
    "href": "architecture.html#architecture-of-nhyris",
    "title": "Architecture",
    "section": "Architecture of nhyris",
    "text": "Architecture of nhyris\nnhyris is consisted with 4 parts: template, commands, Electrons, Installings and Documents\n\n1. template\n\nshiny\nIf name is not predefined: like ex01\n\napp.R: shiny code for show simple shiny application.\nnn-x.R(pattern): shiny code used in shiny gallery. If predefined template name used, it will replace previous app.R \n\n\n\nsrc\nThese are codes for running electron application.\n\nindex.js: The main code, it will show loading.html and call start-shiny.R that run shiny application in port 1124. and as shiny is ready, it will show shiny application.\nloading.html: temporary file that show loading screen to electron\nstart-shiny.R: R code to launch shiny.\n\n\n\n\n2. commamnds\nThese are codes for utilizing nhyris as CLI commands.\n\nbin/nhyris.js will manage these commands.\ninit.js will activate nhyris init\nbuild.js will activate nhyris build\n\nAlso if you have issue on these, please set a label as commands\n\n\n3. Electrons\nThese are code for configuration about manage electron application. Some configuration exists in src/index.js\n\ntemplate/forge.config.js: electron forge configuration file.\ntemplate/package.json: node package information for electron.\n\n\n\n\n\n\n\nNote\n\n\n\n/packages.json is node package information for nhyris\n\n\n\n\n4. Installings\nThese are codes for installing local R\n\npak-pkgs.R: R code to install cran packages into local R\nr.sh: shell script that install local R\n\n\n\n5. Documents\n\n_quarto.yml: quarto configuration\n*.qmd: quarto document files\nbrand/: quarto configuration\ndocs/: quarto destination\nimages/: nhyris logo"
  },
  {
    "objectID": "roadmap.html",
    "href": "roadmap.html",
    "title": "nhyris Roadmap",
    "section": "",
    "text": "Note\n\n\n\nIf you have ideas, it’s always welcome to submit\nMade by jahnen"
  },
  {
    "objectID": "roadmap.html#planned-features",
    "href": "roadmap.html#planned-features",
    "title": "nhyris Roadmap",
    "section": "Planned features",
    "text": "Planned features\n\nMultiple OS\n\nmacOS\nwindows\nLinux (ubuntu)\n\n\n\nMultiple type of installer\n\nZIP\nDMG for macOS\ndeb for ubuntu\nSquirrel.windows for windows\n\n\n\nAdvanced shiny\n\nCRAN\nbioconductor\nr-universe (github)\n\n\n\nAdvanced electron\n\nConfiguration of electron (requires research)\nCode signing for macOS or windows\n\n\n\nExample shiny application\nSee shiny gallery"
  },
  {
    "objectID": "roadmap.html#ideas",
    "href": "roadmap.html#ideas",
    "title": "nhyris Roadmap",
    "section": "IDEAS",
    "text": "IDEAS\n\n\n\n\n\n\nNote\n\n\n\nThese are just ideas, which can be changed as the project evolves.\n\n\n\nAdvanced shiny\nnhyris only supports one-file: app.R\nSo, frameworks like rhino, golem, leprechaun, … maybe considered.\n\n\nDelivering method\nnhyris only uses electron.js.\nBut tauri (with rust) or utilizing user’s already installed R. npm (as javascript package) , … maybe considered."
  },
  {
    "objectID": "customization.html",
    "href": "customization.html",
    "title": "Customize nhyris",
    "section": "",
    "text": "R Packages\nnhyris automatically detects R packages and their dependencies in every R file within the shiny directory.\nlibrary(PKGNAME)\nrequire(PKGNAME)\nIf these R packages are available on CRAN and can be installed with install.packages, nhyris will handle their installation.\n\nDefault R Packages\nnhyris uses shiny and its dependency R packages.\nThe following R packages (with their versions) are installed by default:\nR6 2.6.1 \nbase64enc 0.1-3\ncachem 1.1.0\ncli 3.6.5 \ncommonmark 1.9.5\nRcpp 1.0.14 \nbslib 0.9.0 \ncrayon 1.5.3 \ndigest 0.6.37 \nfastmap 1.2.0 \nfontawesome 0.5.3 \nfs 1.6.6 \nglue 1.8.0 \nhtmltools 0.5.8.1 \nhttpuv 1.6.16 \njquerylib 0.1.4 \njsonlite 2.0.0 \nlater 1.4.2 \nlifecycle 1.0.4 \nmagrittr 2.0.3 \nmemoise 2.0.1 \nmime 0.13 \npromises 1.3.2 \nrappdirs 0.3.3 \nrlang 1.1.6 \nsass 0.4.10 \nsourcetools 0.1.7-1 \nshiny 1.10.0 \nwithr 3.0.2 \nxtable 1.8-4 \n\n\nUsing R Packages from GitHub\nnhyris uses pak to install R packages.\n\nTo install CRAN packages:\n\npak::pak(\"ggplot2\")\n\nTo install GitHub packages, use the OWNER/REPO format (e.g., jcheng5/googleCharts):\n\npak::pak(\"jcheng5/googleCharts\")\nTo specify GitHub packages for nhyris, follow these steps:\n\nAdd the required package information to the pak-pkgs.R file in your project:\n\ngithub_pkgs &lt;- c(\n    \"jcheng5/googleCharts\",\n    ...\n)\n\nRun the following command:\n\nnhyris update PROJECT\nThis will install the specified GitHub R packages.\n\n\nUsing R Packages from Bioconductor\nTo specify Bioconductor packages for nhyris, follow these steps:\n\nAdd the required package information to the pak-pkgs.R file in your project:\n\nbioconductor_pkgs &lt;- c(\n    \"AnnotationDbi\", \n    ...\n)\n\nRun the following command:\n\nnhyris update PROJECT\n\n\n\n\nIcon\nnhyris uses its logo as the icon for the Electron application.\n\n\nIcon File Location\nThe icon image file must exist in each project.\nFor example, in a project named myapp, the file myapp/icon.png will be used as the Electron application’s icon in the out directory.\n\n\n\n\n\n\nNote\n\n\n\nThe template includes three example image files: icon.png, icon.icns, and icon.ico.\nThese files are essentially the same image, just copied and renamed.\n\n\nOn macOS, all of png, icns, and ico formats are supported.\nHowever, according to the official Electron Forge guide, it is recommended to use: - icns for macOS - ico for Windows - png for Linux\n\n\nCreating a Custom Icon\nTo create a custom icon on macOS, you can use the nhyris.key template file provided in the repository.\n\nEdit the image as desired.\nExport the relevant page as a png image.\n\n\n\n\n\n\n\nMade by jahnen"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nhyris",
    "section": "",
    "text": "nhyris is minimal framework to transform R Shiny application into standalone.\nMade by jahnen"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nhyris",
    "section": "How to use",
    "text": "How to use\n\nclone repository: either fork or clone is OK\ninstall dependencies\n\nnode version &gt;= 22.13.1 (LTS: 22.15)\nnode -v \nnpm install \nnpm link \n\n\n\n\n\n\nNote\n\n\n\nplease use zsh or git-bash not powershell\n\n\n\ninitialize project with\n\nnhyris init myapp\n\nmodify your shiny application\nModify shiny and Run your application\n\nCode for shiny is in “myapp/shiny/app.R”\nnhyris run myapp\n\n\n\n\n\n\nNote\n\n\n\nnhyris supports single file: not ui.R & server.R\n\n\n\nbuild application into electron\n\nnhyris build myapp\n\nShare your result\n\nresults exists in “out”"
  },
  {
    "objectID": "index.html#app.r-template-from-shiny-galleries",
    "href": "index.html#app.r-template-from-shiny-galleries",
    "title": "nhyris",
    "section": "app.R template from Shiny Galleries",
    "text": "app.R template from Shiny Galleries\nnhyris init ex01"
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Why nhyris?",
    "section": "",
    "text": "nhyris (an anagram of rshiny, pronounced nai-riss), is a framework for transform R shiny application into desktop standalone app.\nWhich mean, you can run shiny application, with only ZIP file (without R or Rstudio installed)\n\nWhy this is important?\nR shiny let R developer to build interactive web application with R. but as shiny, it requires dependency for engineering concepts like server & infrastructure to response user’s action interactively.\nSo, even one of main target user of R shiny is non-technical like Statisticans, or Decision maker. But they don’t have experience or don’t want to maintain R shiny.\nAlso, utilizing shiny application involves infrastructure complexity like offline access, run in separated environment, handle data security and complicance concerns even for R developer.\nTherefore we suggest as build R shiny application completely independent and self-contained way. Which doesn’t require any dependency to run (and build / maintain more easier than before)\n\nThis issue will affect to R shiny developers, organization users, SAS users transitioning to R, and academics, all of whom need self-contained, server-free shiny applications accessible without technical setup.\nAlso, Real-world adoption of R and Shiny in regulated and enterprise settings, as shown by Novo Nordisk and the Submission Working Group, highlights the growing need for seamless, accessible deployment solutions beyond academia.\n\n\nHow we solve this?\nPreviously, there was try to build application based on Electron.js, commonly used technique for building cross-platform application. See this link for showcase.\n\nHowever, electron is not R (but javascript), it also brings some challenge to R developer who only familliar with R or shiny.\nSince few years ago, we tried to make this process simple and reproducible with instructions. See this repository. and It worked well.\n\n\n\nWhy nhyris?\nPrevious trial was targeted to make most-minimal application, which doesn’t have guide about more detailed configuration even it has ability for do that.\nAs enhanced version, nhyris will expand beyond the macOS prototype to support Windows and Linux, reduce deployment overhead, offer customizable design options, and provide comprehensive documentation and tutorials for R developers.\nso it’s mainly designed as CLI tool, which generates application as a desktop wrapper, with a bundled R runtime for standalone execution.\n\n\n\n\nMade by jahnen"
  }
]
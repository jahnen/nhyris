[
  {
    "objectID": "troubleshooting.html",
    "href": "troubleshooting.html",
    "title": "Troubleshooting",
    "section": "",
    "text": "Project builds successfully, but does not start\nIn most cases, issues running Shiny code with nhyris are related to the R environment.\nBecause nhyris uses an independent R environment, your Shiny app may work in Positron, RStudio, or VS Code, but not in nhyris.\nCommon causes include different R versions or missing package dependencies.\nTo diagnose R-related issues, follow these steps:\n\nNavigate to your project directory (e.g., &lt;Myapp&gt;).\nOpen src/process-manager.js.\nAround line 42, modify the code as follows:\n\n// To enable terminal output for debugging the R Shiny process:\n// Change this line in src/process-manager.js (around L42):\n// stdio: \"ignore\",\n// To this:\nstdio: \"inherit\",\n\n\n\n\n\n\nNote\n\n\n\nThis will display logs from the Shiny application in your IDE’s terminal.\n\n\n\n\n\nExample Logs\nHere is an example log output:\n&gt; \n&gt; .libPaths(r_lib_paths) # Temporarily set library paths to R_LIB_PATHS\n&gt; \n&gt; if (!requireNamespace(\"shiny\", quietly = TRUE)) {\n+   stop(\"The 'shiny' package is not installed in R_LIB_PATHS: \", r_lib_paths)\n+ }\n&gt; shiny_dir &lt;- Sys.getenv(\"RE_SHINY_PATH\")\n&gt; \n&gt; shiny::runApp(\n+   appDir = shiny_dir,\n+   host = \"127.0.0.1\",\n+   launch.browser = FALSE,\n+   port = 1124\n+ )\nLoading required package: shiny\n\n...\n\nError: `server` must be a function\n\n...\n\nError checking server status: TypeError: fetch failed\n    at node:internal/deps/undici/undici:13510:13\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async checkServerStatus (/Users/jinhwan/Documents/GitHub/nhyris/ex39/src/index.js:34:17)\n    at async tryStartWebserver (/Users/jinhwan/Documents/GitHub/nhyris/ex39/src/index.js:139:24)\n    at async App.&lt;anonymous&gt; (/Users/jinhwan/Documents/GitHub/nhyris/ex39/src/index.js:253:5) {\n  [cause]: Error: connect ECONNREFUSED 127.0.0.1:1124\n      at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1611:16) {\n    errno: -61,\n    code: 'ECONNREFUSED',\n    syscall: 'connect',\n    address: '127.0.0.1',\n    port: 1124\n  }\n}\nThis log can be divided into three parts:\n\n1. R Execution\nThis section shows the R and Shiny startup process. These lines are not errors.\n&gt; \n&gt; .libPaths(r_lib_paths) # Temporarily set library paths to R_LIB_PATHS\n&gt; \n&gt; if (!requireNamespace(\"shiny\", quietly = TRUE)) {\n+   stop(\"The 'shiny' package is not installed in R_LIB_PATHS: \", r_lib_paths)\n+ }\n&gt; shiny_dir &lt;- Sys.getenv(\"RE_SHINY_PATH\")\n&gt; \n&gt; shiny::runApp(\n+   appDir = shiny_dir,\n+   host = \"127.0.0.1\",\n+   launch.browser = FALSE,\n+   port = 1124\n+ )\nLoading required package: shiny\n\n...\n\n\n2. Application Error\nThis section shows an error in your Shiny application. You need to investigate and fix the cause.\nError: `server` must be a function\nFor example, in this case, the server object was incorrectly assigned:\nui &lt;- fluidPage(...)\nserver &lt;- ui\nshinyApp(ui = ui, server = server)\n\n\n3. Connection Error\nThis section shows connection attempts from Electron to the Shiny server.\nnhyris works in two parts:\n\nRuns the Shiny application on localhost:1124 using R.\nConnects to the Shiny application from Electron.\n\nThe Shiny app may take some time to start. Both processes are initiated almost simultaneously, so connection errors like the following may appear at first:\nError checking server status: TypeError: fetch failed\n...\n[cause]: Error: connect ECONNREFUSED 127.0.0.1:1124\n...\nIf you see this error only a few times, it is normal—Electron will retry until the Shiny app is ready.\nHowever, if you see this error more than 10 times, you should check and fix your Shiny application.\n\n\n\n\n\n\nMade by jahnen"
  },
  {
    "objectID": "architecture.html",
    "href": "architecture.html",
    "title": "Architecture",
    "section": "",
    "text": "Note\n\n\n\nThis documentation is for developers who want to contribute or make modifications.\n\n\nnhyris consists of five main parts: template, commands, electron-config, installers, and documentation.\n\n\n1. template\n\nshiny\n\napp.R: R script for a simple Shiny application (default entry point).\n\n\n\nsrc\nResponsible for running the Electron application and managing its lifecycle:\n\nindex.js: Main entry point for the Electron app. Handles application state, window management (loading, main, error), launches and monitors the R process via start-shiny.R, and switches to the Shiny app view when ready.\n\napp-state.js: Manages global application state, configuration, and paths.\nwindow-manager.js: Functions for creating and controlling Electron windows (splash, main, error).\nprocess-manager.js: Handles launching, monitoring, and terminating external processes (e.g., R).\nserver-utils.js: Utilities for checking Shiny server status, port availability, etc.\nerror-handler.js: Handles errors during app execution and displays error windows.\nloading.html: Splash/loading screen shown while the Shiny server is starting.\npreload.js: Preload script for secure IPC communication between Electron’s main and renderer processes.\nstart-shiny.R: R script that launches the Shiny app on a specified port (default: 1124).\n\n\n\n\n\n\n\nflowchart LR\n    A --&gt; B(app-state)    \n    A --&gt; E(server-utils)\n    A((index)) --&gt; C(window-manager)\n    A --&gt; H((preload))\n    A --&gt; I(start-shiny)\n    I --&gt; J\n    \n    G --&gt; J((Shiny App View))\n    A --&gt; F(error-handler)\n    C --&gt; G((loading))\n\nstyle A fill:#f5c692,color:#424651\n\nstyle B fill:#C18373,color:#FFF\nstyle C fill:#C18373,color:#FFF\nstyle E fill:#C18373,color:#FFF\nstyle F fill:#C18373,color:#FFF\n\nstyle I fill:#007FFF,color:#FFF\nstyle H fill:#7D5C67,color:#FFF\n\nstyle G fill:#f5c692,color:#424651\nstyle J fill:#FBF6E1,color:#424651\n\nstyle D fill:#FA8072,color:#424651\n\n\nH --&gt; G\nJ --&gt; D(process-manager.js)\n\n\n\n\n\n\n\n\n\n\n2. commands\nCLI commands for managing nhyris projects:\n\nbin/nhyris.js: Entry point for all CLI commands.\ninit.js: Implements nhyris init. Initializes a new project, copies templates, installs dependencies, and updates .gitignore.\nbuild.js: Implements nhyris build. Builds a nhyris app using Electron Forge, supporting makers like zip, dmg, and squirrel, deb.\nupdate.js: Implements nhyris update. Updates R and Node packages for a specified nhyris project.\nrun.js: Implements nhyris run. Runs a specified nhyris app using Electron Forge, ensuring proper process cleanup.\n\n\n\n\n\n\nflowchart LR    \n    B --&gt; A    \n    C --&gt; A\n    A[init] --&gt; B[run]    \n    A --&gt; C[update]\n    A --&gt; D[build]\n\nstyle A fill:#C18373,color:#FFF\nstyle B fill:#f5c692,color:#424651\nstyle C fill:#f5c692,color:#424651\nstyle D fill:#FBF6E1,color:#424651\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you have issues with these, please set the label as commands in your GitHub issue.\n\n\n\n\n\n3. electron-config\nConfiguration files for managing the Electron application:\n\ntemplate/forge.config.js: Electron Forge configuration file (makers, packaging, etc.).\ntemplate/package.json: Node package information for the Electron app template.\n\n\n\n\n\n\n\nNote\n\n\n\nThe root /package.json is for the nhyris CLI tool itself, while template/package.json is for user projects.\n\n\nSome Electron configuration is also present in src/index.js.\n\n\n\n4. installers\nFiles for installing and managing a local R environment:\n\nr.sh: Shell script to install a local R distribution.\npak-pkgs.R: Installs CRAN / Bioconductor / Github packages into the local R environment.\n\n\n\n\n5. documentation\nProject documentation and branding resources:\n\n_quarto.yml: Quarto configuration file.\n*.qmd: Quarto document files (architecture, introduction, roadmap, etc.).\nbrand/: Branding resources (logos, styles) for documentation.\ndocs/: Quarto output destination (rendered documentation).\nimages/: nhyris logos, screenshots, and other images.\n\n\n\n\nAdditional Notes\n\nout/: Build output directory for packaged apps.\nDirectory and file structure may evolve as the project grows. Please refer to the latest documentation and repository structure for updates.\n\n\n\n\n\nMade by jahnen"
  },
  {
    "objectID": "roadmap.html",
    "href": "roadmap.html",
    "title": "nhyris Roadmap",
    "section": "",
    "text": "Note\n\n\n\nIf you have ideas, it’s always welcome to submit\n\n\n\nProvided Features\n\nMultiple OS\n\nmacOS\nWindows\nLinux (Ubuntu)\n\n\n\nMultiple Types of Installer\n\nZIP\nDMG for macOS\ndeb for Ubuntu\nSquirrel.Windows for Windows\n\n\n\nAdvanced Shiny\n\nCRAN package support\nBioconductor package support\nr-universe (GitHub) package support\n\n\n\nExample Shiny Application\n\nSee shiny gallery\n\n\n\n\nPlanned Features\n\nAdvanced Electron\n\nConfiguration of Electron (requires research)\nCode signing for macOS or Windows\n\n\n\n\nIDEAS\n\n\n\n\n\n\nNote\n\n\n\nThese are just ideas, which can be changed as the project evolves.\n\n\n\nAdvanced shiny\nnhyris only supports simple shiny application\nSo, allowing shiny frameworks like rhino, golem, leprechaun, … maybe considered.\n\n\nDelivering method\nnhyris only uses electron.js.\nBut tauri (with rust) or utilizing user’s already installed R. npm (as javascript package) , … maybe considered.\n\n\n\n\n\nMade by jahnen"
  },
  {
    "objectID": "customization.html",
    "href": "customization.html",
    "title": "Customize nhyris",
    "section": "",
    "text": "R Packages\nnhyris automatically detects R packages and their dependencies in every R file within the shiny directory.\nlibrary(PKGNAME)\nrequire(PKGNAME)\nIf these R packages are available on CRAN and can be installed with install.packages, nhyris will handle their installation.\n\nUsing R Packages from GitHub\nnhyris uses pak to install R packages.\n\nTo install CRAN packages:\n\npak::pak(\"ggplot2\")\n\nTo install GitHub packages, use the OWNER/REPO format (e.g., jcheng5/googleCharts):\n\npak::pak(\"jcheng5/googleCharts\")\nTo specify GitHub packages for nhyris, follow these steps:\n\nAdd the required package information to the pak-pkgs.R file in your project:\n\ngithub_pkgs &lt;- c(\n    \"jcheng5/googleCharts\",\n    ...\n)\n\nRun the following command:\n\nnhyris update PROJECT\nThis will install the specified GitHub R packages.\n\n\nUsing R Packages from Bioconductor\nTo specify Bioconductor packages for nhyris, follow these steps:\n\nAdd the required package information to the pak-pkgs.R file in your project:\n\nbioconductor_pkgs &lt;- c(\n    \"AnnotationDbi\", \n    ...\n)\n\nRun the following command:\n\nnhyris update PROJECT\n\n\n\n\nIcon\nnhyris uses its logo as the icon for the Electron application.\n\n\nIcon File Location\nThe icon image file must exist in each project.\nFor example, in a project named myapp, the file myapp/icon.png will be used as the Electron application’s icon in the out directory.\n\n\n\n\n\n\nNote\n\n\n\nThe template includes three example image files: icon.png, icon.icns, and icon.ico.\nThese files are essentially the same image, just copied and renamed.\n\n\nOn macOS, all of png, icns, and ico formats are supported.\nHowever, according to the official Electron Forge guide, it is recommended to use: - icns for macOS - ico for Windows - png for Linux\n\n\nCreating a Custom Icon\nTo create a custom icon on macOS, you can use the nhyris.key template file provided in the repository.\n\nEdit the image as desired.\nExport the relevant page as a png image.\n\n\n\n\n\nsquirrel.windows\nnhyris provides a feature for building a Windows executable installer using squirrel.windows.\nTo build the installer, use the following command:\nnhyris build -m squirrel\nYou can see an example result here.\nFor more details for squirrel.windows, see the NuGet Package Metadata documentation.\n\nMetadata Configuration\nIn nhyris, you can modify the squirrelMakerConfig object inside the handleSquirrelMaker function in maker.js.\nBefore using this code, you must build the project first.\nExample for setting the installer icon and URL:\nconfig: {\n    setupIcon: \"assets/setupIcon.ico\",\n    iconUrl: \"https://github.com/jahnen/nhyris/raw/main/template/assets/icon.ico\",\n},\n\n\nInstaller Icon Not Displaying\nThe setupIcon is used as the installer icon, but due to caching issues, it may not appear immediately.\nYou can check the icon in the file properties or after rebooting your PC.\nSee the related issue for more details.\n\n\niconUrl\nWhen using iconUrl, you must provide a URL from the web (not a local file path).\nThis is an Electron policy and cannot be changed by nhyris.\n\n\nCreating ICO Files\nSimply renaming a file to .ico may not work properly.\nTo convert a PNG to ICO, it is recommended to use an online converter such as icoconverter.com.\n\n\n\ndeb\nnhyris supports building .deb installers for Debian-based Linux distributions using Electron Forge’s deb maker.\n\nPrerequisites\nTo build a .deb package, you need to have dpkg and fakeroot installed on your system.\nYou can install them with:\nsudo apt-get update\nsudo apt-get install dpkg fakeroot\n\n\nConfiguration Options\nBy default, no extra options are specified for the deb maker in nhyris.\nIf you need to customize the build (e.g., set maintainer, description, categories, etc.), refer to the available options in the Electron Forge deb maker config documentation.\n\n\nUninstalling the Application\nTo uninstall your .deb application, use one of the following commands:\nsudo apt remove myapp\n# or, to remove configuration files as well:\nsudo apt purge myapp\n\n\n\n\n\nMade by jahnen"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nhyris",
    "section": "",
    "text": "nhyris is a minimal framework to transform an R Shiny application into a standalone desktop app.\n\nPrerequisites\n\nNode.js &gt;= 22.13.1 (LTS: 22.15)\nnpm &gt;= 11.4.1\n\nCheck your versions:\nnode -v\nnpm -v\n\n\nInstallation\nInstall nhyris globally via npm:\nnpm install -g nhyris\n\n\n\n\n\n\nNote\n\n\n\nPlease use zsh or git-bash, not PowerShell.\n\n\n\n\nUsage\n\nInitialize a new project (replace myapp with your project name):\n\nnhyris init myapp\n\nModify your Shiny application\n\n\nEdit your app code in myapp/shiny/app.R\n\n\nRun your application in development mode:\n\nnhyris run myapp\n\nUpdate dependencies or project files (optional):\n\nnhyris update myapp\n\nBuild the application into an Electron app:\n\nnhyris build myapp\n\nFind your packaged app in the out directory.\n\n\n\nExample: Using Shiny Gallery Templates\nYou can use example apps from the RStudio Shiny Gallery as templates.\nFor example, to initialize a project with the 001-hello template:\nnhyris init 001-hello\n\n\nCross-platform\nnhyris supports building desktop applications for multiple operating systems, including Windows, macOS, and Linux.\nIt leverages Electron’s cross-platform capabilities and supports various makers such as:\n\nZIP (universal)\nSquirrel.Windows (Windows installer)\nDMG (macOS)\ndeb (ubuntu linux)\n\nYou can configure the target platforms and makers in your project settings to generate installers or packages suitable for your users’ environments.\n\n\n\n\nMade by jahnen"
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Why nhyris?",
    "section": "",
    "text": "nhyris (an anagram of rshiny, pronounced nai-riss) is a framework to transform R Shiny applications into standalone desktop apps.\nThis means you can run a Shiny application using only a ZIP file—no need to install R or RStudio.\n\n\nWhy is this important?\nR Shiny enables R developers to build interactive web applications with R.\nHowever, deploying Shiny apps typically requires engineering knowledge of servers and infrastructure to handle user interactions.\nMany of Shiny’s target users—such as statisticians and decision makers—are non-technical and may lack the experience or desire to maintain Shiny servers.\nEven for R developers, using Shiny apps can involve infrastructure complexity:\n- Ensuring offline access\n- Running in isolated environments\n- Handling data security and compliance\nWe propose building R Shiny applications in a completely independent and self-contained way, requiring no external dependencies to run—making building, running, and maintaining apps easier than ever.\n\nThis challenge affects R Shiny developers, organizations, SAS users transitioning to R, and academics—all of whom need self-contained, server-free Shiny applications accessible without technical setup.\nThe real-world adoption of R and Shiny in regulated and enterprise settings, as demonstrated by Novo Nordisk and the Submission Working Group, highlights the growing need for seamless, accessible deployment solutions beyond academia.\n\n\n\nHow do we solve this?\nPreviously, some attempted to build desktop applications using Electron.js, a popular framework for cross-platform apps. See this showcase for examples.\n\nHowever, Electron is JavaScript-based, which can be challenging for R developers who are only familiar with R or Shiny.\nA few years ago, we created a simple, reproducible process with step-by-step instructions (see this repository), and it worked well.\n\n\n\n\nWhy nhyris?\nThe previous approach focused on minimal applications and lacked guidance for advanced configuration, even though it was possible.\nAs an enhanced solution, nhyris expands beyond the original macOS prototype to support Windows and Linux, reduces deployment overhead, offers customizable design options, and provides comprehensive documentation and tutorials for R developers.\nnhyris is designed as a CLI tool that generates a desktop application wrapper with a bundled R runtime for true standalone execution—no R or RStudio installation required.\n\n\n\n\nMade by jahnen"
  }
]